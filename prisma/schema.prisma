generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id
  email               String            @unique
  name                String
  about               String?
  country             String
  createdAt           DateTime          @default(now())
  image               String?
  industryType        String
  onboardingCompleted Boolean           @default(false)
  role                String
  updatedAt           DateTime          @updatedAt
  activities          Activity[]
  comments            Comment[]
  subscription        Subscription?
  tasks               Task[]
  workspaces          WorkspaceMember[]
  chats               Chat[]
  messages            ChatMessage[]
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  description String?
  ownerId     String?
  inviteCode  String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  projects    Project[]
  members     WorkspaceMember[]
  chats       Chat[]
  channels    ChatChannel[]
}

model WorkspaceMember {
  id            String          @id @default(uuid())
  userId        String
  workspaceId   String
  accessLevel   AccessLevel     @default(MEMBER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  projectAccess ProjectAccess[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model Project {
  id            String          @id @default(uuid())
  name          String
  description   String?
  workspaceId   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  activities    Activity[]
  comments      Comment[]
  documentation Documentation?
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectAccess ProjectAccess[]
  tasks         Task[]

  @@index([workspaceId])
}

model ProjectAccess {
  id                String          @id @default(uuid())
  workspaceMemberId String
  projectId         String
  hasAccess         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  project           Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)

  @@unique([workspaceMemberId, projectId])
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(LOW)
  startDate   DateTime
  dueDate     DateTime
  position    Int
  projectId   String
  assigneeId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments File[]
  assignedTo  User?        @relation(fields: [assigneeId], references: [id])
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  projectId   String
  userId      String
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model Documentation {
  id        String   @id @default(uuid())
  projectId String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy String?
  project   Project  @relation(fields: [projectId], references: [id])
}

model File {
  id        String   @id @default(uuid())
  name      String
  url       String
  taskId    String?
  type      FileType
  createdAt DateTime @default(now())
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String             @unique
  plan              SubscriptionPlan   @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  lemonsqueezyId    String?
  orderId           String?
  customerId        String?
  currentPeriodEnd  DateTime?
  frequency         String             @default("monthly")
  cancelAtPeriodEnd Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Chat {
  id          String   @id @default(uuid())
  message     String
  workspaceId String
  senderId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([senderId])
}

model ChatChannel {
  id          String        @id @default(uuid())
  name        String
  workspaceId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]

  @@index([workspaceId])
}

model ChatMessage {
  id          String      @id @default(uuid())
  content     String
  channelId   String
  userId      String
  attachments Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  channel     ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([userId])
}

enum AccessLevel {
  OWNER
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  IN_REVIEW
  BACKLOG
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FileType {
  IMAGE
  PDF
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}
